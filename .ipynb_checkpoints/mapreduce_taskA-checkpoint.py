{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7f19f6a-7aa2-466c-adb5-b5a56fa8961c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Usage: python mapreduce_taskA.py AComp_Passenger_data_no_error.csv\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"\n",
    "mapreduce_taskA.py\n",
    "\n",
    "Implements a simple multi-process MapReduce to find the passenger(s)\n",
    "with the highest number of flights in AComp_Passenger_data_no_error.csv.\n",
    "\"\"\"\n",
    "\n",
    "import csv\n",
    "import sys\n",
    "import multiprocessing as mp\n",
    "import numpy as np\n",
    "\n",
    "def map_chunk(passenger_ids):\n",
    "    \"\"\"\n",
    "    Map + local Combine:\n",
    "    Count occurrences of each passenger_id in this chunk.\n",
    "    Returns: dict passenger_id -> count\n",
    "    \"\"\"\n",
    "    local_counts = {}\n",
    "    for pid in passenger_ids:\n",
    "        local_counts[pid] = local_counts.get(pid, 0) + 1\n",
    "    return local_counts\n",
    "\n",
    "def shuffle(intermediate_dicts):\n",
    "    \"\"\"\n",
    "    Shuffle phase:\n",
    "    Merge all local_counts dicts into a single structure mapping\n",
    "    passenger_id -> list of local counts.\n",
    "    \"\"\"\n",
    "    shuffled = {}\n",
    "    for local in intermediate_dicts:\n",
    "        for pid, cnt in local.items():\n",
    "            if pid not in shuffled:\n",
    "                shuffled[pid] = [cnt]\n",
    "            else:\n",
    "                shuffled[pid].append(cnt)\n",
    "    return shuffled\n",
    "\n",
    "def reduce_counts(item):\n",
    "    \"\"\"\n",
    "    Reduce phase:\n",
    "    Sum the list of counts for one passenger_id.\n",
    "    Input: (passenger_id, [c1, c2, ...])\n",
    "    Returns: (passenger_id, total_count)\n",
    "    \"\"\"\n",
    "    pid, counts = item\n",
    "    return pid, sum(counts)\n",
    "\n",
    "def chunkify(data, n_chunks):\n",
    "    \"\"\"\n",
    "    Split data list into n_chunks as evenly as possible.\n",
    "    Uses numpy.array_split for convenience. :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}\n",
    "    \"\"\"\n",
    "    return np.array_split(data, n_chunks)\n",
    "\n",
    "def main(input_csv):\n",
    "    # 1) Read and parse input file into a flat list of passenger IDs\n",
    "    passenger_ids = []\n",
    "    try:\n",
    "        with open(input_csv, newline='') as f:\n",
    "            reader = csv.reader(f)\n",
    "            for row in reader:\n",
    "                # Expect: [passenger_id, flight_id, from, to, dep_time, flight_time]\n",
    "                if not row or row[0].startswith('#'):  # skip comments/empty lines\n",
    "                    continue\n",
    "                passenger_ids.append(row[0])\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: file '{input_csv}' not found.\")\n",
    "        sys.exit(1)\n",
    "    except Exception as e:\n",
    "        print(\"Error reading input:\", e)\n",
    "        sys.exit(1)\n",
    "\n",
    "    if not passenger_ids:\n",
    "        print(\"No passenger data found.\")\n",
    "        return\n",
    "\n",
    "    # 2) Determine number of workers and split the data into chunks :contentReference[oaicite:2]{index=2}:contentReference[oaicite:3]{index=3}\n",
    "    num_cores = mp.cpu_count()\n",
    "    num_chunks = min(num_cores, len(passenger_ids))\n",
    "    chunks = chunkify(passenger_ids, num_chunks)\n",
    "\n",
    "    # 3) Map + Combine in parallel\n",
    "    with mp.Pool(processes=num_cores) as pool:\n",
    "        intermediate = pool.map(map_chunk, chunks)\n",
    "\n",
    "    # 4) Shuffle (single-process)\n",
    "    shuffled = shuffle(intermediate)\n",
    "\n",
    "    # 5) Reduce in parallel\n",
    "    with mp.Pool(processes=num_cores) as pool:\n",
    "        reduced = pool.map(reduce_counts, shuffled.items())\n",
    "\n",
    "    # 6) Identify passenger(s) with the maximum flight count\n",
    "    reduced_dict = dict(reduced)\n",
    "    max_flights = max(reduced_dict.values())\n",
    "    top_passengers = [pid for pid, cnt in reduced_dict.items() if cnt == max_flights]\n",
    "\n",
    "    # 7) Output\n",
    "    print(\"Passenger(s) with the highest number of flights:\")\n",
    "    print(f\"  → {max_flights} flight(s)\\n\")\n",
    "    for pid in top_passengers:\n",
    "        print(f\"    • {pid}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    if len(sys.argv) != 2:\n",
    "        print(\"Usage: python mapreduce_taskA.py AComp_Passenger_data_no_error.csv\")\n",
    "    else:\n",
    "        main(sys.argv[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8cfd714c-48cb-4c08-a3fb-9b5f46844b7f",
   "metadata": {},
   "outputs": [
    {
     "ename": "Exception",
     "evalue": "File `'mapreduce_taskA.py'` not found.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.12/site-packages/IPython/core/magics/execution.py:716\u001b[0m, in \u001b[0;36mExecutionMagics.run\u001b[0;34m(self, parameter_s, runner, file_finder)\u001b[0m\n\u001b[1;32m    715\u001b[0m     fpath \u001b[38;5;241m=\u001b[39m arg_lst[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m--> 716\u001b[0m     filename \u001b[38;5;241m=\u001b[39m file_finder(fpath)\n\u001b[1;32m    717\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mIndexError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.12/site-packages/IPython/utils/path.py:91\u001b[0m, in \u001b[0;36mget_py_filename\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m py_name\n\u001b[0;32m---> 91\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mIOError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFile `\u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m` not found.\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m name)\n",
      "\u001b[0;31mOSError\u001b[0m: File `'mapreduce_taskA.py'` not found.",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[5], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39mrun_line_magic(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrun\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmapreduce_taskA.py AComp_Passenger_data_no_error.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.12/site-packages/IPython/core/interactiveshell.py:2480\u001b[0m, in \u001b[0;36mInteractiveShell.run_line_magic\u001b[0;34m(self, magic_name, line, _stack_depth)\u001b[0m\n\u001b[1;32m   2478\u001b[0m     kwargs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlocal_ns\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_local_scope(stack_depth)\n\u001b[1;32m   2479\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbuiltin_trap:\n\u001b[0;32m-> 2480\u001b[0m     result \u001b[38;5;241m=\u001b[39m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   2482\u001b[0m \u001b[38;5;66;03m# The code below prevents the output from being displayed\u001b[39;00m\n\u001b[1;32m   2483\u001b[0m \u001b[38;5;66;03m# when using magics with decorator @output_can_be_silenced\u001b[39;00m\n\u001b[1;32m   2484\u001b[0m \u001b[38;5;66;03m# when the last Python token in the expression is a ';'.\u001b[39;00m\n\u001b[1;32m   2485\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(fn, magic\u001b[38;5;241m.\u001b[39mMAGIC_OUTPUT_CAN_BE_SILENCED, \u001b[38;5;28;01mFalse\u001b[39;00m):\n",
      "File \u001b[0;32m/opt/anaconda3/lib/python3.12/site-packages/IPython/core/magics/execution.py:727\u001b[0m, in \u001b[0;36mExecutionMagics.run\u001b[0;34m(self, parameter_s, runner, file_finder)\u001b[0m\n\u001b[1;32m    725\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m os\u001b[38;5;241m.\u001b[39mname \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnt\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m re\u001b[38;5;241m.\u001b[39mmatch(\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m^\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.*\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m$\u001b[39m\u001b[38;5;124m\"\u001b[39m,fpath):\n\u001b[1;32m    726\u001b[0m         warn(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFor Windows, use double quotes to wrap a filename: \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124mun \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmypath\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mmyfile.py\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m--> 727\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m    729\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m fpath \u001b[38;5;129;01min\u001b[39;00m sys\u001b[38;5;241m.\u001b[39mmeta_path:\n",
      "\u001b[0;31mException\u001b[0m: File `'mapreduce_taskA.py'` not found."
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb182a59-406c-486b-a1ad-e5b79a963aff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
